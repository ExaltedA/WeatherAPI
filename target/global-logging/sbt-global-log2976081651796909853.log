[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\aldie\AppData\Local\Temp\idea1.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\aldie\AppData\Local\Temp\idea1.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.4.4 (Oracle Corporation Java 13.0.2)
[debug]       Load.loadUnit: plugins took 145.3345ms
[debug]       Load.loadUnit: defsScala took 0.2582ms
[debug] [Loading] Scanning directory C:\Users\aldie\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\aldie\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(List(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin))), Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 26.8434 ms
[debug]           Load.resolveProject(global-plugins) took 45.6498ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\aldie\.sbt\1.0\plugins, plugins: List(<none>))) took 96.8078ms
[debug] [Loading] Done in C:\Users\aldie\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 116.9962ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.2297ms
[debug]     Load.loadUnit(file:/C:/Users/aldie/.sbt/1.0/plugins/, ...) took 272.1672ms
[debug]   Load.apply: load took 454.5417ms
[debug]   Load.apply: resolveProjects took 10.8564ms
[debug]   Load.apply: finalTransforms took 90.5388ms
[debug]   Load.apply: config.delegates took 9.5286ms
[debug]   Load.apply: Def.make(settings)... took 2528.1128ms
[debug]   Load.apply: structureIndex took 170.2292ms
[debug]   Load.apply: mkStreams took 1.5919ms
[info] loading global plugins from C:\Users\aldie\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 6221.7568ms
[debug]           Load.loadUnit: plugins took 62.8164ms
[debug]           Load.loadUnit: defsScala took 0.0081ms
[debug] [Loading] Scanning directory C:\Users\aldie\Documents\ProjectsInteliJ\WeatherAPI\project
[debug]             Load.loadUnit: mkEval took 7.5151ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\aldie\Documents\ProjectsInteliJ\WeatherAPI\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(List(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin))), Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 1.6186 ms
[info] loading settings for project weatherapi-build from idea1.sbt ...
[debug]               Load.resolveProject(weatherapi-build) took 2.8069ms
[debug]             Load.loadTransitive: finalizeProject(Project(id weatherapi-build, base: C:\Users\aldie\Documents\ProjectsInteliJ\WeatherAPI\project, plugins: List(<none>))) took 5.0284ms
[debug] [Loading] Done in C:\Users\aldie\Documents\ProjectsInteliJ\WeatherAPI\project, returning: (weatherapi-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 3198.074ms
[debug]           Load.loadUnit: cleanEvalClasses took 10.4011ms
[debug]         Load.loadUnit(file:/C:/Users/aldie/Documents/ProjectsInteliJ/WeatherAPI/project/, ...) took 3276.3689ms
[debug]       Load.apply: load took 3279.0884ms
[debug]       Load.apply: resolveProjects took 0.1137ms
[debug]       Load.apply: finalTransforms took 9.9759ms
[debug]       Load.apply: config.delegates took 0.4199ms
[debug]       Load.apply: Def.make(settings)... took 117.9271ms
[debug]       Load.apply: structureIndex took 29.0727ms
[debug]       Load.apply: mkStreams took 0.0024ms
[info] loading project definition from C:\Users\aldie\Documents\ProjectsInteliJ\WeatherAPI\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug]     Load.loadUnit: plugins took 5295.1052ms
[debug]     Load.loadUnit: defsScala took 0.0026ms
[debug] [Loading] Scanning directory C:\Users\aldie\Documents\ProjectsInteliJ\WeatherAPI
[debug]       Load.loadUnit: mkEval took 0.3228ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\aldie\Documents\ProjectsInteliJ\WeatherAPI, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(List(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin))), Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin))), Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin)))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 1.7735 ms
[info] loading settings for project weatherapi from build.sbt ...
[debug]         Load.resolveProject(weatherapi) took 36.6655ms
[debug]       Load.loadTransitive: finalizeProject(Project(id weatherapi, base: C:\Users\aldie\Documents\ProjectsInteliJ\WeatherAPI, plugins: List(<none>))) took 39.5989ms
[debug] [Loading] Done in C:\Users\aldie\Documents\ProjectsInteliJ\WeatherAPI, returning: (weatherapi)
[debug]     Load.loadUnit: loadedProjectsRaw took 2366.8369ms
[debug]     Load.loadUnit: cleanEvalClasses took 71.8025ms
[debug]   Load.loadUnit(file:/C:/Users/aldie/Documents/ProjectsInteliJ/WeatherAPI/, ...) took 7736.6299ms
[debug] Load.apply: load took 7739.269ms
[debug] Load.apply: resolveProjects took 0.2083ms
[debug] Load.apply: finalTransforms took 25.2586ms
[debug] Load.apply: config.delegates took 0.2988ms
[debug] Load.apply: Def.make(settings)... took 102.5129ms
[debug] Load.apply: structureIndex took 22.4231ms
[debug] Load.apply: mkStreams took 0.0035ms
[info] set current project to WeatherAPI (in build file:/C:/Users/aldie/Documents/ProjectsInteliJ/WeatherAPI/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 62323 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 62323, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to WeatherAPI (in build file:/C:/Users/aldie/Documents/ProjectsInteliJ/WeatherAPI/)
[debug] > Exec(idea-shell, None, None)
