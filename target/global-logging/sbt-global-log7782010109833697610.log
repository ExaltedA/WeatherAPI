[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.4.4 (Oracle Corporation Java 13.0.2)
[debug]       Load.loadUnit: plugins took 181.4822ms
[debug]       Load.loadUnit: defsScala took 0.8078ms
[debug] [Loading] Scanning directory C:\Users\aldie\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\aldie\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(List(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin))), Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 59.0149 ms
[debug]           Load.resolveProject(global-plugins) took 109.399ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\aldie\.sbt\1.0\plugins, plugins: List(<none>))) took 223.7564ms
[debug] [Loading] Done in C:\Users\aldie\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 261.7704ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.3573ms
[debug]     Load.loadUnit(file:/C:/Users/aldie/.sbt/1.0/plugins/, ...) took 466.4438ms
[debug]   Load.apply: load took 915.9437ms
[debug]   Load.apply: resolveProjects took 7.9531ms
[debug]   Load.apply: finalTransforms took 214.2836ms
[debug]   Load.apply: config.delegates took 8.5237ms
[debug]   Load.apply: Def.make(settings)... took 3128.4711ms
[debug]   Load.apply: structureIndex took 177.5382ms
[debug]   Load.apply: mkStreams took 1.8314ms
[info] loading global plugins from C:\Users\aldie\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 7498.7751ms
[debug]           Load.loadUnit: plugins took 36.1152ms
[debug]           Load.loadUnit: defsScala took 0.0043ms
[debug] [Loading] Scanning directory C:\Users\aldie\Documents\ProjectsInteliJ\WeatherAPI\project
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\aldie\Documents\ProjectsInteliJ\WeatherAPI\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(List(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin))), Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 4.6318 ms
[debug]               Load.resolveProject(weatherapi-build) took 6.5838ms
[debug]             Load.loadTransitive: finalizeProject(Project(id weatherapi-build, base: C:\Users\aldie\Documents\ProjectsInteliJ\WeatherAPI\project, plugins: List(<none>))) took 12.0174ms
[debug] [Loading] Done in C:\Users\aldie\Documents\ProjectsInteliJ\WeatherAPI\project, returning: (weatherapi-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 17.5775ms
[debug]           Load.loadUnit: cleanEvalClasses took 0.0192ms
[debug]         Load.loadUnit(file:/C:/Users/aldie/Documents/ProjectsInteliJ/WeatherAPI/project/, ...) took 55.2957ms
[debug]       Load.apply: load took 58.72ms
[debug]       Load.apply: resolveProjects took 0.6308ms
[debug]       Load.apply: finalTransforms took 22.3984ms
[debug]       Load.apply: config.delegates took 0.5308ms
[debug]       Load.apply: Def.make(settings)... took 181.0123ms
[debug]       Load.apply: structureIndex took 58.172ms
[debug]       Load.apply: mkStreams took 0.0029ms
[info] loading project definition from C:\Users\aldie\Documents\ProjectsInteliJ\WeatherAPI\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug]     Load.loadUnit: plugins took 638.409ms
[debug]     Load.loadUnit: defsScala took 0.0039ms
[debug] [Loading] Scanning directory C:\Users\aldie\Documents\ProjectsInteliJ\WeatherAPI
[debug]       Load.loadUnit: mkEval took 7.482ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\aldie\Documents\ProjectsInteliJ\WeatherAPI, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(List(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin))), Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 4.3513 ms
[info] loading settings for project weatherapi from build.sbt ...
[debug]         Load.resolveProject(weatherapi) took 6.7439ms
[debug]       Load.loadTransitive: finalizeProject(Project(id weatherapi, base: C:\Users\aldie\Documents\ProjectsInteliJ\WeatherAPI, plugins: List(<none>))) took 11.9875ms
[debug] [Loading] Done in C:\Users\aldie\Documents\ProjectsInteliJ\WeatherAPI, returning: (weatherapi)
[debug]     Load.loadUnit: loadedProjectsRaw took 3410.6537ms
[debug]     Load.loadUnit: cleanEvalClasses took 45.5894ms
[debug]   Load.loadUnit(file:/C:/Users/aldie/Documents/ProjectsInteliJ/WeatherAPI/, ...) took 4096.0543ms
[debug] Load.apply: load took 4101.0532ms
[debug] Load.apply: resolveProjects took 0.2648ms
[debug] Load.apply: finalTransforms took 6.517ms
[debug] Load.apply: config.delegates took 0.5217ms
[debug] Load.apply: Def.make(settings)... took 456.9726ms
[debug] Load.apply: structureIndex took 353.4365ms
[debug] Load.apply: mkStreams took 0.0108ms
[info] set current project to WeatherAPI (in build file:/C:/Users/aldie/Documents/ProjectsInteliJ/WeatherAPI/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(run, None, None)
[debug] Evaluating tasks: Compile / run
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[info] compiling 10 Scala sources to C:\Users\aldie\Documents\ProjectsInteliJ\WeatherAPI\target\scala-2.13\classes ...
[warn] C:\Users\aldie\Documents\ProjectsInteliJ\WeatherAPI\src\main\scala\CityDirectives.scala:10:69: match may not be exhaustive.
[warn] It would fail on the following input: Failure(_)
[warn]   (e: Throwable => ApiError): Directive1[T] = onComplete(f) flatMap {
[warn]                                                                     ^
[warn] one warning found
[info] done compiling
